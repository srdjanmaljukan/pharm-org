generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  kreirano
  poručeno
  stiglo
  javljeno
  prokucanoNijeNaplaćeno
  naplaćenoNijeProkucano
  ostalo
  završeno
}

model Order {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productName String
  qty         Int
  phoneNumber String
  personName  String?
  note        String?
  status      OrderStatus @default(kreirano)
  distributor String?
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @updatedAt
  updatedById String?     @db.Uuid
  updatedBy   Worker?     @relation(fields: [updatedById], references: [id])
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  password      String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatetAt     DateTime  @updatedAt
  worker        Worker[]
  account       Account[]
  session       Session[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Worker {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String  @db.Uuid
  name         String
  password     String
  role         String
  updatedOrder Order[]
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
